"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var appSettingsModule = require("application-settings");
var FAVOURITES = 'FAVORITES';
try {
    exports.favourites = JSON.parse(appSettingsModule.getString(FAVOURITES));
}
catch (_a) {
    exports.favourites = new Array();
}
function addToFavourites(session) {
    if (findSessionIndexInFavourites(session.id) >= 0) {
        // Session already added to favourites
        return;
    }
    persistSessionToFavourites(session);
}
exports.addToFavourites = addToFavourites;
function removeFromFavourites(session) {
    var index = findSessionIndexInFavourites(session.id);
    if (index >= 0) {
        exports.favourites.splice(index, 1);
        updateFavourites();
    }
}
exports.removeFromFavourites = removeFromFavourites;
function findSessionIndexInFavourites(sessionId) {
    for (var i = 0; i < exports.favourites.length; i++) {
        if (exports.favourites[i].sessionId === sessionId) {
            return i;
        }
    }
    return -1;
}
function persistSessionToFavourites(session) {
    exports.favourites.push({
        sessionId: session.id,
        calendarEventId: session.calendarEventId
    });
    updateFavourites();
}
function updateFavourites() {
    var newValue = JSON.stringify(exports.favourites);
    appSettingsModule.setString(FAVOURITES, newValue);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGUtc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZhdm9yaXRlLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSx3REFBMEQ7QUFFMUQsSUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDO0FBSS9CLElBQUksQ0FBQztJQUNELGtCQUFVLEdBQTRCLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDOUYsQ0FBQztBQUNELEtBQUssQ0FBQyxDQUFDLElBQUQsQ0FBQztJQUNILGtCQUFVLEdBQUcsSUFBSSxLQUFLLEVBQW9CLENBQUM7QUFDL0MsQ0FBQztBQUVELHlCQUFnQyxPQUF5QjtJQUNyRCxFQUFFLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxzQ0FBc0M7UUFDdEMsTUFBTSxDQUFDO0lBQ1gsQ0FBQztJQUVELDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFQRCwwQ0FPQztBQUVELDhCQUFxQyxPQUF5QjtJQUMxRCxJQUFNLEtBQUssR0FBRyw0QkFBNEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFdkQsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixrQkFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsZ0JBQWdCLEVBQUUsQ0FBQztJQUN2QixDQUFDO0FBQ0wsQ0FBQztBQVBELG9EQU9DO0FBRUQsc0NBQXNDLFNBQWlCO0lBQ25ELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsa0JBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUN6QyxFQUFFLENBQUMsQ0FBQyxrQkFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDYixDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLENBQUM7QUFFRCxvQ0FBb0MsT0FBeUI7SUFDekQsa0JBQVUsQ0FBQyxJQUFJLENBQUM7UUFDWixTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUU7UUFDckIsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlO0tBQzNDLENBQUMsQ0FBQztJQUVILGdCQUFnQixFQUFFLENBQUM7QUFDdkIsQ0FBQztBQUVEO0lBQ0ksSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBVSxDQUFDLENBQUM7SUFDNUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN0RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmF2b3VyaXRlU2Vzc2lvbiB9IGZyb20gJy4uL3NoYXJlZC9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgU2Vzc2lvblZpZXdNb2RlbCB9IGZyb20gJy4uL3BhZ2VzL3Nlc3Npb24tcGFnZS9zZXNzaW9uLXZpZXctbW9kZWwnO1xyXG5pbXBvcnQgKiBhcyBhcHBTZXR0aW5nc01vZHVsZSBmcm9tICdhcHBsaWNhdGlvbi1zZXR0aW5ncyc7XHJcblxyXG5jb25zdCBGQVZPVVJJVEVTID0gJ0ZBVk9SSVRFUyc7XHJcblxyXG5leHBvcnQgbGV0IGZhdm91cml0ZXM6IEFycmF5PEZhdm91cml0ZVNlc3Npb24+O1xyXG5cclxudHJ5IHtcclxuICAgIGZhdm91cml0ZXMgPSA8QXJyYXk8RmF2b3VyaXRlU2Vzc2lvbj4+SlNPTi5wYXJzZShhcHBTZXR0aW5nc01vZHVsZS5nZXRTdHJpbmcoRkFWT1VSSVRFUykpO1xyXG59XHJcbmNhdGNoIHtcclxuICAgIGZhdm91cml0ZXMgPSBuZXcgQXJyYXk8RmF2b3VyaXRlU2Vzc2lvbj4oKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRvRmF2b3VyaXRlcyhzZXNzaW9uOiBTZXNzaW9uVmlld01vZGVsKSB7XHJcbiAgICBpZiAoZmluZFNlc3Npb25JbmRleEluRmF2b3VyaXRlcyhzZXNzaW9uLmlkKSA+PSAwKSB7XHJcbiAgICAgICAgLy8gU2Vzc2lvbiBhbHJlYWR5IGFkZGVkIHRvIGZhdm91cml0ZXNcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcGVyc2lzdFNlc3Npb25Ub0Zhdm91cml0ZXMoc2Vzc2lvbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGcm9tRmF2b3VyaXRlcyhzZXNzaW9uOiBTZXNzaW9uVmlld01vZGVsKSB7XHJcbiAgICBjb25zdCBpbmRleCA9IGZpbmRTZXNzaW9uSW5kZXhJbkZhdm91cml0ZXMoc2Vzc2lvbi5pZCk7XHJcblxyXG4gICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICBmYXZvdXJpdGVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgdXBkYXRlRmF2b3VyaXRlcygpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kU2Vzc2lvbkluZGV4SW5GYXZvdXJpdGVzKHNlc3Npb25JZDogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmF2b3VyaXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChmYXZvdXJpdGVzW2ldLnNlc3Npb25JZCA9PT0gc2Vzc2lvbklkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gLTE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBlcnNpc3RTZXNzaW9uVG9GYXZvdXJpdGVzKHNlc3Npb246IFNlc3Npb25WaWV3TW9kZWwpIHtcclxuICAgIGZhdm91cml0ZXMucHVzaCh7XHJcbiAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uLmlkLFxyXG4gICAgICAgIGNhbGVuZGFyRXZlbnRJZDogc2Vzc2lvbi5jYWxlbmRhckV2ZW50SWRcclxuICAgIH0pO1xyXG5cclxuICAgIHVwZGF0ZUZhdm91cml0ZXMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlRmF2b3VyaXRlcygpIHtcclxuICAgIGNvbnN0IG5ld1ZhbHVlID0gSlNPTi5zdHJpbmdpZnkoZmF2b3VyaXRlcyk7XHJcbiAgICBhcHBTZXR0aW5nc01vZHVsZS5zZXRTdHJpbmcoRkFWT1VSSVRFUywgbmV3VmFsdWUpO1xyXG59Il19